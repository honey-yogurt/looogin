// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

plugin enhancer {
    provider = '@core/enhancer'
    generatePermissionChecker = true
}

plugin hooks {
  provider = '@zenstackhq/tanstack-query'
  target = 'react'
  version = 'v5'
  output = "./src/lib/hooks"
}

// plugin trpc {
//   provider = '@zenstackhq/trpc'
//   output = 'src/server/api/routers/generated'
//   generateClientHelpers = 'next'
// }

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    password      String? @password @omit
    role          String? @default("USER") // "ADMIN" or "USER"
    image         String? @url
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt
    accounts      Account[]
    sessions      Session[]
    products      Product[]
    sentMessages  Message[]    @relation("MessageSender")
    sentChats     ChatRoom[]   @relation("SentChats")
    receivedChats ChatRoom[]   @relation("ReceivedChats")
    favorites     Favorite[]

    @@allow('create', true)
    @@allow('read', auth() != null)
    @@allow('update', auth().role == "ADMIN" || auth() == this)
    @@allow('delete', auth().role == "ADMIN")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}


model Product {
    id String @id @default(cuid())
    name String // 商品名称
    oprice Float // 商品原价
    price Float // 商品单价
    quantity Int @default(1) // 商品数量
    description String // 商品描述
    image String @url // 商品主图
    detailImages ProductImage[] // 商品详情图片，可以包含各个角度的拍照，也可以包含原价的购买订单等
    depreciation String // 商品折旧情况 全新，次新，明显使用痕迹，严重使用痕迹
    status String @default("AVAILABLE") // AVAILABLE, SOLD 可用 售出
    owner User @relation(fields: [ownerId], references: [id], onDelete: Cascade)
    ownerId String // 商品拥有者
    categoryId String // 商品分类ID
    labels String[] // 修改为字符串数组，存储标签名称
    wants Int // 商品心愿数，即多少人收
    popularity Int // 商品热度，即多少人点进详情页，粗略计算下
    attributes ProductAttribute[] // 商品属性值列表
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    chatRooms ChatRoom[] @relation("ProductChatRooms") // 添加反向关系
    favorites Favorite[]

    @@allow('read', true)
    @@allow('create', auth() != null && ownerId == auth().id)
    @@allow('update,delete', auth() == owner)
    @@index([wants(sort: Desc)]) // 添加索引以优化排序查询
}

// 新增 ProductImage 模型用于存储详情图片
model ProductImage {
    id String @id @default(cuid())
    url String @url // 图片链接
    description String? // 图片描述
    order Int @default(0) // 图片顺序，用于在详情页排序展示
    product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
    productId String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@allow('read', true)
    @@allow('create,update,delete', auth() == product.owner)
    @@index([productId, order])
}

// 商品分类
model Category {
    id String @id @default(cuid())
    name String // 分类名称
    description String? // 分类描述
    parentId String? // 父分类ID
    parent Category? @relation("CategoryHierarchy", fields: [parentId], references: [id])
    subCategories Category[] @relation("CategoryHierarchy")
    attributes CategoryAttribute[] // 该分类的属性定义列表
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@allow('read', true)
}

// 商品标签类型表，首先要新增标签类型，才能打标签
model Label {
    id String @id @default(cuid())
    name String @unique // 标签名称唯一
    popularity Int @default(0) // 标签热度 新增商品时候，以及手动打标签时候 没有的话就新增并+1，有的话就+1
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@allow('read', true)
}

// 分类的属性定义
model CategoryAttribute {
    id String @id @default(cuid())
    name String // 属性名称，如"品牌"、"成色"等
    category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
    categoryId String
    order Int @default(0) // 显示顺序
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@allow('read', true)
    @@allow('create,update,delete', auth().role == "ADMIN")
    @@unique([categoryId, name])
}

// 商品属性值
model ProductAttribute {
    id String @id @default(cuid())
    name String // 属性名称
    value String // 属性值
    product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
    productId String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@allow('read', true)
    @@allow('create,update,delete', auth() == product.owner)
    @@unique([productId, name])
}

// 聊天会话
model ChatRoom {
    id          String    @id @default(cuid())
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
    
    product     Product   @relation("ProductChatRooms", fields: [productId], references: [id])
    productId   String
    
    sender      User      @relation("SentChats", fields: [senderId], references: [id])
    senderId    String
    receiver    User      @relation("ReceivedChats", fields: [receiverId], references: [id])
    receiverId  String
    
    lastMessage    String?
    senderUnread   Int    @default(0)
    receiverUnread Int    @default(0)
    messages       Message[]
    status         String @default("ACTIVE") // ACTIVE, ARCHIVED, BLOCKED

    @@unique([senderId, receiverId, productId])
    @@allow('create', auth() != null)
    @@allow('read', auth() != null && 
        (auth().id == senderId || auth().id == receiverId)
    )
    @@allow('update', auth() != null && 
        (auth().id == senderId || auth().id == receiverId)
    )
}

// 聊天消息
model Message {
    id          String    @id @default(cuid())
    content     String
    createdAt   DateTime  @default(now())
    
    // 发送者
    sender      User      @relation("MessageSender", fields: [senderId], references: [id])
    senderId    String
    
    // 所属会话
    chatRoom    ChatRoom  @relation(fields: [chatRoomId], references: [id])
    chatRoomId  String
    
    // 消息状态
    isRead      Boolean   @default(false)
    type        String @default("TEXT") // TEXT, IMAGE, SYSTEM 等
    status      String @default("SENT") // SENDING, SENT, FAILED

    @@allow('create', auth() != null && auth().id == senderId)
    @@allow('read', auth() != null && 
        (auth().id == chatRoom.senderId || auth().id == chatRoom.receiverId)
    )
    @@allow('update', auth() != null && 
        (auth().id == chatRoom.senderId || auth().id == chatRoom.receiverId)
    )
}

// 收藏表
model Favorite {
    id          String    @id @default(cuid())
    user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId      String
    product     Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
    productId   String
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt

    @@unique([userId, productId])
    @@allow('create', auth() != null && auth().id == userId)
    @@allow('read', true)
    @@allow('delete', auth() != null && auth().id == userId)
}
