// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

plugin enhancer {
    provider = '@core/enhancer'
    generatePermissionChecker = true
}

plugin hooks {
  provider = '@zenstackhq/tanstack-query'
  target = 'react'
  version = 'v5'
  output = "./src/lib/hooks"
}

// plugin trpc {
//   provider = '@zenstackhq/trpc'
//   output = 'src/server/api/routers/generated'
//   generateClientHelpers = 'next'
// }

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    password      String? @password @omit
    role          String? @default("USER") // "ADMIN" or "USER"
    image         String? @url
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt
    accounts      Account[]
    sessions      Session[]
    products      Product[]

    @@allow('create', true)
    @@allow('read', auth().role == "ADMIN" || auth() == this)  // auth() 返回当前用户，判断当前用户是否是管理员或者被操作的对象（表中的那行）
    @@allow('update', auth().role == "ADMIN" || auth() == this)
    @@allow('delete', auth().role == "ADMIN")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}


model Product {
    id String @id @default(cuid())
    name String // 商品名称
    price Float // 商品单价
    quantity Int @default(1) // 商品数量
    description String // 商品描述
    image String @url // 商品图片
    status String @default("AVAILABLE") // AVAILABLE, SOLD 可用 售出
    owner User @relation(fields: [ownerId], references: [id], onDelete: Cascade)
    ownerId String // 商品拥有者
    categoryId String // 商品分类ID
    label String // 商品标签,各种标签，可以自定义的那种
    wants Int // 商品心愿数，即多少人收藏
    popularity Int // 商品热度，即多少人点进详情页，粗略计算下
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@allow('read', true) // 所有人可读
    @@allow('create', auth() != null && ownerId == auth().id)  // 创建时检查 ownerId
    @@allow('update,delete', auth() == owner) // 只有卖家可以更新和删除
    @@index([wants(sort: Desc)]) // 添加索引以优化排序查询
}

// 商品分类
model category {
    id String @id @default(cuid())
    name String // 分类名称
    description String? // 分类描述
    parentId String? // 父分类ID
    parent category? @relation("CategoryHierarchy", fields: [parentId], references: [id])
    subCategories category[] @relation("CategoryHierarchy")
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model label {
    id String @id @default(cuid())
    name String @unique // 标签名称唯一
    popularity Int @default(0) // 标签热度 新增商品时候，以及手动打标签时候 没有的话就新增并+1，有的话就+1
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}
