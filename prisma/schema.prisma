//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                       String  @id() @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  refresh_token_expires_in Int?

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id() @default(cuid())
  sessionToken String   @unique()
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id() @default(cuid())
  name          String?
  email         String?   @unique()
  emailVerified DateTime?
  password      String?
  role          String?   @default("USER")
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt()
  accounts      Account[]
  sessions      Session[]
  products      Product[]
}

model VerificationToken {
  identifier String
  token      String   @unique()
  expires    DateTime

  @@unique([identifier, token])
}

model Product {
  id          String   @id() @default(cuid())
  name        String
  price       Float
  quantity    Int      @default(1)
  description String
  image       String
  status      String   @default("AVAILABLE")
  owner       User     @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId     String
  categoryId  String
  label       String
  wants       Int
  popularity  Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt()

  @@index([wants(sort: Desc)])
}

model category {
  id            String     @id() @default(cuid())
  name          String
  description   String?
  parentId      String?
  parent        category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  subCategories category[] @relation("CategoryHierarchy")
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt()
}

model label {
  id         String   @id() @default(cuid())
  name       String   @unique()
  popularity Int      @default(0)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt()
}
