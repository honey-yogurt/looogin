//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                       String  @id() @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  refresh_token_expires_in Int?

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id() @default(cuid())
  sessionToken String   @unique()
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String     @id() @default(cuid())
  name          String?
  email         String?    @unique()
  emailVerified DateTime?
  password      String?
  role          String?    @default("USER")
  image         String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt()
  accounts      Account[]
  sessions      Session[]
  products      Product[]
  sentMessages  Message[]  @relation("MessageSender")
  sentChats     ChatRoom[] @relation("SentChats")
  receivedChats ChatRoom[] @relation("ReceivedChats")
  favorites     Favorite[]
}

model VerificationToken {
  identifier String
  token      String   @unique()
  expires    DateTime

  @@unique([identifier, token])
}

model Product {
  id           String             @id() @default(cuid())
  name         String
  oprice       Float
  price        Float
  quantity     Int                @default(1)
  description  String
  image        String
  detailImages ProductImage[]
  depreciation String
  status       String             @default("AVAILABLE")
  owner        User               @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId      String
  categoryId   String
  labels       String[]
  wants        Int
  popularity   Int
  attributes   ProductAttribute[]
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt()
  chatRooms    ChatRoom[]         @relation("ProductChatRooms")
  favorites    Favorite[]

  @@index([wants(sort: Desc)])
}

model ProductImage {
  id          String   @id() @default(cuid())
  url         String
  description String?
  order       Int      @default(0)
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt()

  @@index([productId, order])
}

model Category {
  id            String              @id() @default(cuid())
  name          String
  description   String?
  parentId      String?
  parent        Category?           @relation("CategoryHierarchy", fields: [parentId], references: [id])
  subCategories Category[]          @relation("CategoryHierarchy")
  attributes    CategoryAttribute[]
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt()
}

model Label {
  id         String   @id() @default(cuid())
  name       String   @unique()
  popularity Int      @default(0)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt()
}

model CategoryAttribute {
  id         String   @id() @default(cuid())
  name       String
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId String
  order      Int      @default(0)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt()

  @@unique([categoryId, name])
}

model ProductAttribute {
  id        String   @id() @default(cuid())
  name      String
  value     String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  @@unique([productId, name])
}

model ChatRoom {
  id             String    @id() @default(cuid())
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt()
  product        Product   @relation("ProductChatRooms", fields: [productId], references: [id])
  productId      String
  sender         User      @relation("SentChats", fields: [senderId], references: [id])
  senderId       String
  receiver       User      @relation("ReceivedChats", fields: [receiverId], references: [id])
  receiverId     String
  lastMessage    String?
  senderUnread   Int       @default(0)
  receiverUnread Int       @default(0)
  messages       Message[]
  status         String    @default("ACTIVE")

  @@unique([senderId, receiverId, productId])
}

model Message {
  id         String   @id() @default(cuid())
  content    String
  createdAt  DateTime @default(now())
  sender     User     @relation("MessageSender", fields: [senderId], references: [id])
  senderId   String
  chatRoom   ChatRoom @relation(fields: [chatRoomId], references: [id])
  chatRoomId String
  isRead     Boolean  @default(false)
  type       String   @default("TEXT")
  status     String   @default("SENT")
}

model Favorite {
  id        String   @id() @default(cuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  @@unique([userId, productId])
}
