/******************************************************************************
* This file was generated by ZenStack CLI 2.9.4.
******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { Prisma, productAttribute } from "@prisma/client";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/react-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/react';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;
import { useSuspenseModelQuery, useSuspenseInfiniteModelQuery } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { UseSuspenseQueryOptions, UseSuspenseInfiniteQueryOptions } from '@tanstack/react-query';

export function useCreateproductAttribute(options?: Omit<(UseMutationOptions<(productAttribute | undefined), DefaultError, Prisma.productAttributeCreateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.productAttributeCreateArgs, DefaultError, productAttribute, true>('productAttribute', 'POST', `${endpoint}/productAttribute/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.productAttributeCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.productAttributeCreateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, productAttribute, Prisma.productAttributeGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.productAttributeCreateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, productAttribute, Prisma.productAttributeGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManyproductAttribute(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.productAttributeCreateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.productAttributeCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('productAttribute', 'POST', `${endpoint}/productAttribute/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.productAttributeCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.productAttributeCreateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.productAttributeCreateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManyproductAttribute<TArgs extends Prisma.productAttributeFindManyArgs, TQueryFnData = Array<Prisma.productAttributeGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.productAttributeFindManyArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('productAttribute', `${endpoint}/productAttribute/findMany`, args, options, fetch);
}

export function useInfiniteFindManyproductAttribute<TArgs extends Prisma.productAttributeFindManyArgs, TQueryFnData = Array<Prisma.productAttributeGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.productAttributeFindManyArgs>, options?: Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('productAttribute', `${endpoint}/productAttribute/findMany`, args, options, fetch);
}

export function useSuspenseFindManyproductAttribute<TArgs extends Prisma.productAttributeFindManyArgs, TQueryFnData = Array<Prisma.productAttributeGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.productAttributeFindManyArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('productAttribute', `${endpoint}/productAttribute/findMany`, args, options, fetch);
}

export function useSuspenseInfiniteFindManyproductAttribute<TArgs extends Prisma.productAttributeFindManyArgs, TQueryFnData = Array<Prisma.productAttributeGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.productAttributeFindManyArgs>, options?: Omit<UseSuspenseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseInfiniteModelQuery<TQueryFnData, TData, TError>('productAttribute', `${endpoint}/productAttribute/findMany`, args, options, fetch);
}

export function useFindUniqueproductAttribute<TArgs extends Prisma.productAttributeFindUniqueArgs, TQueryFnData = Prisma.productAttributeGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.productAttributeFindUniqueArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('productAttribute', `${endpoint}/productAttribute/findUnique`, args, options, fetch);
}

export function useSuspenseFindUniqueproductAttribute<TArgs extends Prisma.productAttributeFindUniqueArgs, TQueryFnData = Prisma.productAttributeGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.productAttributeFindUniqueArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('productAttribute', `${endpoint}/productAttribute/findUnique`, args, options, fetch);
}

export function useFindFirstproductAttribute<TArgs extends Prisma.productAttributeFindFirstArgs, TQueryFnData = Prisma.productAttributeGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.productAttributeFindFirstArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('productAttribute', `${endpoint}/productAttribute/findFirst`, args, options, fetch);
}

export function useSuspenseFindFirstproductAttribute<TArgs extends Prisma.productAttributeFindFirstArgs, TQueryFnData = Prisma.productAttributeGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.productAttributeFindFirstArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('productAttribute', `${endpoint}/productAttribute/findFirst`, args, options, fetch);
}

export function useUpdateproductAttribute(options?: Omit<(UseMutationOptions<(productAttribute | undefined), DefaultError, Prisma.productAttributeUpdateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.productAttributeUpdateArgs, DefaultError, productAttribute, true>('productAttribute', 'PUT', `${endpoint}/productAttribute/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.productAttributeUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.productAttributeUpdateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, productAttribute, Prisma.productAttributeGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.productAttributeUpdateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, productAttribute, Prisma.productAttributeGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManyproductAttribute(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.productAttributeUpdateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.productAttributeUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('productAttribute', 'PUT', `${endpoint}/productAttribute/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.productAttributeUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.productAttributeUpdateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.productAttributeUpdateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertproductAttribute(options?: Omit<(UseMutationOptions<(productAttribute | undefined), DefaultError, Prisma.productAttributeUpsertArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.productAttributeUpsertArgs, DefaultError, productAttribute, true>('productAttribute', 'POST', `${endpoint}/productAttribute/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.productAttributeUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.productAttributeUpsertArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, productAttribute, Prisma.productAttributeGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.productAttributeUpsertArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, productAttribute, Prisma.productAttributeGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteproductAttribute(options?: Omit<(UseMutationOptions<(productAttribute | undefined), DefaultError, Prisma.productAttributeDeleteArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.productAttributeDeleteArgs, DefaultError, productAttribute, true>('productAttribute', 'DELETE', `${endpoint}/productAttribute/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.productAttributeDeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.productAttributeDeleteArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, productAttribute, Prisma.productAttributeGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.productAttributeDeleteArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, productAttribute, Prisma.productAttributeGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManyproductAttribute(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.productAttributeDeleteManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.productAttributeDeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('productAttribute', 'DELETE', `${endpoint}/productAttribute/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.productAttributeDeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.productAttributeDeleteManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.productAttributeDeleteManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregateProductAttribute<TArgs extends Prisma.ProductAttributeAggregateArgs, TQueryFnData = Prisma.GetProductAttributeAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.ProductAttributeAggregateArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ProductAttribute', `${endpoint}/productAttribute/aggregate`, args, options, fetch);
}

export function useSuspenseAggregateProductAttribute<TArgs extends Prisma.ProductAttributeAggregateArgs, TQueryFnData = Prisma.GetProductAttributeAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.ProductAttributeAggregateArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ProductAttribute', `${endpoint}/productAttribute/aggregate`, args, options, fetch);
}

export function useGroupByproductAttribute<TArgs extends Prisma.productAttributeGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.productAttributeGroupByArgs['orderBy'] } : { orderBy?: Prisma.productAttributeGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.ProductAttributeGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.ProductAttributeGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.ProductAttributeGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.ProductAttributeGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.productAttributeGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('productAttribute', `${endpoint}/productAttribute/groupBy`, args, options, fetch);
}

export function useSuspenseGroupByproductAttribute<TArgs extends Prisma.productAttributeGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.productAttributeGroupByArgs['orderBy'] } : { orderBy?: Prisma.productAttributeGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.ProductAttributeGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.ProductAttributeGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.ProductAttributeGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.ProductAttributeGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.productAttributeGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('productAttribute', `${endpoint}/productAttribute/groupBy`, args, options, fetch);
}

export function useCountproductAttribute<TArgs extends Prisma.productAttributeCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.ProductAttributeCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.productAttributeCountArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('productAttribute', `${endpoint}/productAttribute/count`, args, options, fetch);
}

export function useSuspenseCountproductAttribute<TArgs extends Prisma.productAttributeCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.ProductAttributeCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.productAttributeCountArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('productAttribute', `${endpoint}/productAttribute/count`, args, options, fetch);
}

export function useCheckproductAttribute<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { id?: string; name?: string; value?: string; productId?: string }; }, options?: (Omit<UseQueryOptions<boolean, TError, boolean>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('productAttribute', `${endpoint}/productAttribute/check`, args, options, fetch);
}
