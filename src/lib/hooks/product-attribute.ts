/******************************************************************************
* This file was generated by ZenStack CLI 2.9.4.
******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { Prisma, ProductAttribute } from "@prisma/client";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/react-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/react';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;
import { useSuspenseModelQuery, useSuspenseInfiniteModelQuery } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { UseSuspenseQueryOptions, UseSuspenseInfiniteQueryOptions } from '@tanstack/react-query';

export function useCreateProductAttribute(options?: Omit<(UseMutationOptions<(ProductAttribute | undefined), DefaultError, Prisma.ProductAttributeCreateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ProductAttributeCreateArgs, DefaultError, ProductAttribute, true>('ProductAttribute', 'POST', `${endpoint}/productAttribute/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ProductAttributeCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.ProductAttributeCreateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, ProductAttribute, Prisma.ProductAttributeGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.ProductAttributeCreateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, ProductAttribute, Prisma.ProductAttributeGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManyProductAttribute(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.ProductAttributeCreateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ProductAttributeCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('ProductAttribute', 'POST', `${endpoint}/productAttribute/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ProductAttributeCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.ProductAttributeCreateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.ProductAttributeCreateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManyProductAttribute<TArgs extends Prisma.ProductAttributeFindManyArgs, TQueryFnData = Array<Prisma.ProductAttributeGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ProductAttributeFindManyArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ProductAttribute', `${endpoint}/productAttribute/findMany`, args, options, fetch);
}

export function useInfiniteFindManyProductAttribute<TArgs extends Prisma.ProductAttributeFindManyArgs, TQueryFnData = Array<Prisma.ProductAttributeGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ProductAttributeFindManyArgs>, options?: Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('ProductAttribute', `${endpoint}/productAttribute/findMany`, args, options, fetch);
}

export function useSuspenseFindManyProductAttribute<TArgs extends Prisma.ProductAttributeFindManyArgs, TQueryFnData = Array<Prisma.ProductAttributeGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ProductAttributeFindManyArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ProductAttribute', `${endpoint}/productAttribute/findMany`, args, options, fetch);
}

export function useSuspenseInfiniteFindManyProductAttribute<TArgs extends Prisma.ProductAttributeFindManyArgs, TQueryFnData = Array<Prisma.ProductAttributeGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ProductAttributeFindManyArgs>, options?: Omit<UseSuspenseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseInfiniteModelQuery<TQueryFnData, TData, TError>('ProductAttribute', `${endpoint}/productAttribute/findMany`, args, options, fetch);
}

export function useFindUniqueProductAttribute<TArgs extends Prisma.ProductAttributeFindUniqueArgs, TQueryFnData = Prisma.ProductAttributeGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.ProductAttributeFindUniqueArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ProductAttribute', `${endpoint}/productAttribute/findUnique`, args, options, fetch);
}

export function useSuspenseFindUniqueProductAttribute<TArgs extends Prisma.ProductAttributeFindUniqueArgs, TQueryFnData = Prisma.ProductAttributeGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.ProductAttributeFindUniqueArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ProductAttribute', `${endpoint}/productAttribute/findUnique`, args, options, fetch);
}

export function useFindFirstProductAttribute<TArgs extends Prisma.ProductAttributeFindFirstArgs, TQueryFnData = Prisma.ProductAttributeGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ProductAttributeFindFirstArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ProductAttribute', `${endpoint}/productAttribute/findFirst`, args, options, fetch);
}

export function useSuspenseFindFirstProductAttribute<TArgs extends Prisma.ProductAttributeFindFirstArgs, TQueryFnData = Prisma.ProductAttributeGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ProductAttributeFindFirstArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ProductAttribute', `${endpoint}/productAttribute/findFirst`, args, options, fetch);
}

export function useUpdateProductAttribute(options?: Omit<(UseMutationOptions<(ProductAttribute | undefined), DefaultError, Prisma.ProductAttributeUpdateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ProductAttributeUpdateArgs, DefaultError, ProductAttribute, true>('ProductAttribute', 'PUT', `${endpoint}/productAttribute/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ProductAttributeUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.ProductAttributeUpdateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, ProductAttribute, Prisma.ProductAttributeGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.ProductAttributeUpdateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, ProductAttribute, Prisma.ProductAttributeGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManyProductAttribute(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.ProductAttributeUpdateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ProductAttributeUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('ProductAttribute', 'PUT', `${endpoint}/productAttribute/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ProductAttributeUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.ProductAttributeUpdateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.ProductAttributeUpdateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertProductAttribute(options?: Omit<(UseMutationOptions<(ProductAttribute | undefined), DefaultError, Prisma.ProductAttributeUpsertArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ProductAttributeUpsertArgs, DefaultError, ProductAttribute, true>('ProductAttribute', 'POST', `${endpoint}/productAttribute/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ProductAttributeUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.ProductAttributeUpsertArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, ProductAttribute, Prisma.ProductAttributeGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.ProductAttributeUpsertArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, ProductAttribute, Prisma.ProductAttributeGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteProductAttribute(options?: Omit<(UseMutationOptions<(ProductAttribute | undefined), DefaultError, Prisma.ProductAttributeDeleteArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ProductAttributeDeleteArgs, DefaultError, ProductAttribute, true>('ProductAttribute', 'DELETE', `${endpoint}/productAttribute/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ProductAttributeDeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.ProductAttributeDeleteArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, ProductAttribute, Prisma.ProductAttributeGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.ProductAttributeDeleteArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, ProductAttribute, Prisma.ProductAttributeGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManyProductAttribute(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.ProductAttributeDeleteManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ProductAttributeDeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('ProductAttribute', 'DELETE', `${endpoint}/productAttribute/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ProductAttributeDeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.ProductAttributeDeleteManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.ProductAttributeDeleteManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregateProductAttribute<TArgs extends Prisma.ProductAttributeAggregateArgs, TQueryFnData = Prisma.GetProductAttributeAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.ProductAttributeAggregateArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ProductAttribute', `${endpoint}/productAttribute/aggregate`, args, options, fetch);
}

export function useSuspenseAggregateProductAttribute<TArgs extends Prisma.ProductAttributeAggregateArgs, TQueryFnData = Prisma.GetProductAttributeAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.ProductAttributeAggregateArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ProductAttribute', `${endpoint}/productAttribute/aggregate`, args, options, fetch);
}

export function useGroupByProductAttribute<TArgs extends Prisma.ProductAttributeGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.ProductAttributeGroupByArgs['orderBy'] } : { orderBy?: Prisma.ProductAttributeGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.ProductAttributeGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.ProductAttributeGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.ProductAttributeGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.ProductAttributeGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.ProductAttributeGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ProductAttribute', `${endpoint}/productAttribute/groupBy`, args, options, fetch);
}

export function useSuspenseGroupByProductAttribute<TArgs extends Prisma.ProductAttributeGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.ProductAttributeGroupByArgs['orderBy'] } : { orderBy?: Prisma.ProductAttributeGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.ProductAttributeGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.ProductAttributeGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.ProductAttributeGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.ProductAttributeGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.ProductAttributeGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ProductAttribute', `${endpoint}/productAttribute/groupBy`, args, options, fetch);
}

export function useCountProductAttribute<TArgs extends Prisma.ProductAttributeCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.ProductAttributeCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ProductAttributeCountArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ProductAttribute', `${endpoint}/productAttribute/count`, args, options, fetch);
}

export function useSuspenseCountProductAttribute<TArgs extends Prisma.ProductAttributeCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.ProductAttributeCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ProductAttributeCountArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ProductAttribute', `${endpoint}/productAttribute/count`, args, options, fetch);
}

export function useCheckProductAttribute<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { id?: string; name?: string; value?: string; productId?: string }; }, options?: (Omit<UseQueryOptions<boolean, TError, boolean>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('ProductAttribute', `${endpoint}/productAttribute/check`, args, options, fetch);
}
