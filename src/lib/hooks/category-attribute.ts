/******************************************************************************
* This file was generated by ZenStack CLI 2.9.4.
******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { Prisma, CategoryAttribute } from "@prisma/client";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/react-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/react';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;
import { useSuspenseModelQuery, useSuspenseInfiniteModelQuery } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { UseSuspenseQueryOptions, UseSuspenseInfiniteQueryOptions } from '@tanstack/react-query';

export function useCreateCategoryAttribute(options?: Omit<(UseMutationOptions<(CategoryAttribute | undefined), DefaultError, Prisma.CategoryAttributeCreateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.CategoryAttributeCreateArgs, DefaultError, CategoryAttribute, true>('CategoryAttribute', 'POST', `${endpoint}/categoryAttribute/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.CategoryAttributeCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.CategoryAttributeCreateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, CategoryAttribute, Prisma.CategoryAttributeGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.CategoryAttributeCreateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, CategoryAttribute, Prisma.CategoryAttributeGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManyCategoryAttribute(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.CategoryAttributeCreateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.CategoryAttributeCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('CategoryAttribute', 'POST', `${endpoint}/categoryAttribute/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.CategoryAttributeCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.CategoryAttributeCreateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.CategoryAttributeCreateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManyCategoryAttribute<TArgs extends Prisma.CategoryAttributeFindManyArgs, TQueryFnData = Array<Prisma.CategoryAttributeGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.CategoryAttributeFindManyArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('CategoryAttribute', `${endpoint}/categoryAttribute/findMany`, args, options, fetch);
}

export function useInfiniteFindManyCategoryAttribute<TArgs extends Prisma.CategoryAttributeFindManyArgs, TQueryFnData = Array<Prisma.CategoryAttributeGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.CategoryAttributeFindManyArgs>, options?: Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('CategoryAttribute', `${endpoint}/categoryAttribute/findMany`, args, options, fetch);
}

export function useSuspenseFindManyCategoryAttribute<TArgs extends Prisma.CategoryAttributeFindManyArgs, TQueryFnData = Array<Prisma.CategoryAttributeGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.CategoryAttributeFindManyArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('CategoryAttribute', `${endpoint}/categoryAttribute/findMany`, args, options, fetch);
}

export function useSuspenseInfiniteFindManyCategoryAttribute<TArgs extends Prisma.CategoryAttributeFindManyArgs, TQueryFnData = Array<Prisma.CategoryAttributeGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.CategoryAttributeFindManyArgs>, options?: Omit<UseSuspenseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseInfiniteModelQuery<TQueryFnData, TData, TError>('CategoryAttribute', `${endpoint}/categoryAttribute/findMany`, args, options, fetch);
}

export function useFindUniqueCategoryAttribute<TArgs extends Prisma.CategoryAttributeFindUniqueArgs, TQueryFnData = Prisma.CategoryAttributeGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.CategoryAttributeFindUniqueArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('CategoryAttribute', `${endpoint}/categoryAttribute/findUnique`, args, options, fetch);
}

export function useSuspenseFindUniqueCategoryAttribute<TArgs extends Prisma.CategoryAttributeFindUniqueArgs, TQueryFnData = Prisma.CategoryAttributeGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.CategoryAttributeFindUniqueArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('CategoryAttribute', `${endpoint}/categoryAttribute/findUnique`, args, options, fetch);
}

export function useFindFirstCategoryAttribute<TArgs extends Prisma.CategoryAttributeFindFirstArgs, TQueryFnData = Prisma.CategoryAttributeGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.CategoryAttributeFindFirstArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('CategoryAttribute', `${endpoint}/categoryAttribute/findFirst`, args, options, fetch);
}

export function useSuspenseFindFirstCategoryAttribute<TArgs extends Prisma.CategoryAttributeFindFirstArgs, TQueryFnData = Prisma.CategoryAttributeGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.CategoryAttributeFindFirstArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('CategoryAttribute', `${endpoint}/categoryAttribute/findFirst`, args, options, fetch);
}

export function useUpdateCategoryAttribute(options?: Omit<(UseMutationOptions<(CategoryAttribute | undefined), DefaultError, Prisma.CategoryAttributeUpdateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.CategoryAttributeUpdateArgs, DefaultError, CategoryAttribute, true>('CategoryAttribute', 'PUT', `${endpoint}/categoryAttribute/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.CategoryAttributeUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.CategoryAttributeUpdateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, CategoryAttribute, Prisma.CategoryAttributeGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.CategoryAttributeUpdateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, CategoryAttribute, Prisma.CategoryAttributeGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManyCategoryAttribute(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.CategoryAttributeUpdateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.CategoryAttributeUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('CategoryAttribute', 'PUT', `${endpoint}/categoryAttribute/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.CategoryAttributeUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.CategoryAttributeUpdateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.CategoryAttributeUpdateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertCategoryAttribute(options?: Omit<(UseMutationOptions<(CategoryAttribute | undefined), DefaultError, Prisma.CategoryAttributeUpsertArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.CategoryAttributeUpsertArgs, DefaultError, CategoryAttribute, true>('CategoryAttribute', 'POST', `${endpoint}/categoryAttribute/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.CategoryAttributeUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.CategoryAttributeUpsertArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, CategoryAttribute, Prisma.CategoryAttributeGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.CategoryAttributeUpsertArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, CategoryAttribute, Prisma.CategoryAttributeGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteCategoryAttribute(options?: Omit<(UseMutationOptions<(CategoryAttribute | undefined), DefaultError, Prisma.CategoryAttributeDeleteArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.CategoryAttributeDeleteArgs, DefaultError, CategoryAttribute, true>('CategoryAttribute', 'DELETE', `${endpoint}/categoryAttribute/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.CategoryAttributeDeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.CategoryAttributeDeleteArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, CategoryAttribute, Prisma.CategoryAttributeGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.CategoryAttributeDeleteArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, CategoryAttribute, Prisma.CategoryAttributeGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManyCategoryAttribute(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.CategoryAttributeDeleteManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.CategoryAttributeDeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('CategoryAttribute', 'DELETE', `${endpoint}/categoryAttribute/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.CategoryAttributeDeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.CategoryAttributeDeleteManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.CategoryAttributeDeleteManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregateCategoryAttribute<TArgs extends Prisma.CategoryAttributeAggregateArgs, TQueryFnData = Prisma.GetCategoryAttributeAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.CategoryAttributeAggregateArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('CategoryAttribute', `${endpoint}/categoryAttribute/aggregate`, args, options, fetch);
}

export function useSuspenseAggregateCategoryAttribute<TArgs extends Prisma.CategoryAttributeAggregateArgs, TQueryFnData = Prisma.GetCategoryAttributeAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.CategoryAttributeAggregateArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('CategoryAttribute', `${endpoint}/categoryAttribute/aggregate`, args, options, fetch);
}

export function useGroupByCategoryAttribute<TArgs extends Prisma.CategoryAttributeGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.CategoryAttributeGroupByArgs['orderBy'] } : { orderBy?: Prisma.CategoryAttributeGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.CategoryAttributeGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.CategoryAttributeGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.CategoryAttributeGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.CategoryAttributeGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.CategoryAttributeGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('CategoryAttribute', `${endpoint}/categoryAttribute/groupBy`, args, options, fetch);
}

export function useSuspenseGroupByCategoryAttribute<TArgs extends Prisma.CategoryAttributeGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.CategoryAttributeGroupByArgs['orderBy'] } : { orderBy?: Prisma.CategoryAttributeGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.CategoryAttributeGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.CategoryAttributeGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.CategoryAttributeGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.CategoryAttributeGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.CategoryAttributeGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('CategoryAttribute', `${endpoint}/categoryAttribute/groupBy`, args, options, fetch);
}

export function useCountCategoryAttribute<TArgs extends Prisma.CategoryAttributeCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.CategoryAttributeCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.CategoryAttributeCountArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('CategoryAttribute', `${endpoint}/categoryAttribute/count`, args, options, fetch);
}

export function useSuspenseCountCategoryAttribute<TArgs extends Prisma.CategoryAttributeCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.CategoryAttributeCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.CategoryAttributeCountArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('CategoryAttribute', `${endpoint}/categoryAttribute/count`, args, options, fetch);
}

export function useCheckCategoryAttribute<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { id?: string; name?: string; categoryId?: string; order?: number }; }, options?: (Omit<UseQueryOptions<boolean, TError, boolean>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('CategoryAttribute', `${endpoint}/categoryAttribute/check`, args, options, fetch);
}
