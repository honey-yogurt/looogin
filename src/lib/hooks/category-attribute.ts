/******************************************************************************
* This file was generated by ZenStack CLI 2.9.4.
******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { Prisma, categoryAttribute } from "@prisma/client";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/react-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/react';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;
import { useSuspenseModelQuery, useSuspenseInfiniteModelQuery } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { UseSuspenseQueryOptions, UseSuspenseInfiniteQueryOptions } from '@tanstack/react-query';

export function useCreatecategoryAttribute(options?: Omit<(UseMutationOptions<(categoryAttribute | undefined), DefaultError, Prisma.categoryAttributeCreateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.categoryAttributeCreateArgs, DefaultError, categoryAttribute, true>('categoryAttribute', 'POST', `${endpoint}/categoryAttribute/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.categoryAttributeCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.categoryAttributeCreateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, categoryAttribute, Prisma.categoryAttributeGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.categoryAttributeCreateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, categoryAttribute, Prisma.categoryAttributeGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManycategoryAttribute(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.categoryAttributeCreateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.categoryAttributeCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('categoryAttribute', 'POST', `${endpoint}/categoryAttribute/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.categoryAttributeCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.categoryAttributeCreateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.categoryAttributeCreateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManycategoryAttribute<TArgs extends Prisma.categoryAttributeFindManyArgs, TQueryFnData = Array<Prisma.categoryAttributeGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.categoryAttributeFindManyArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('categoryAttribute', `${endpoint}/categoryAttribute/findMany`, args, options, fetch);
}

export function useInfiniteFindManycategoryAttribute<TArgs extends Prisma.categoryAttributeFindManyArgs, TQueryFnData = Array<Prisma.categoryAttributeGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.categoryAttributeFindManyArgs>, options?: Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('categoryAttribute', `${endpoint}/categoryAttribute/findMany`, args, options, fetch);
}

export function useSuspenseFindManycategoryAttribute<TArgs extends Prisma.categoryAttributeFindManyArgs, TQueryFnData = Array<Prisma.categoryAttributeGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.categoryAttributeFindManyArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('categoryAttribute', `${endpoint}/categoryAttribute/findMany`, args, options, fetch);
}

export function useSuspenseInfiniteFindManycategoryAttribute<TArgs extends Prisma.categoryAttributeFindManyArgs, TQueryFnData = Array<Prisma.categoryAttributeGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.categoryAttributeFindManyArgs>, options?: Omit<UseSuspenseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseInfiniteModelQuery<TQueryFnData, TData, TError>('categoryAttribute', `${endpoint}/categoryAttribute/findMany`, args, options, fetch);
}

export function useFindUniquecategoryAttribute<TArgs extends Prisma.categoryAttributeFindUniqueArgs, TQueryFnData = Prisma.categoryAttributeGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.categoryAttributeFindUniqueArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('categoryAttribute', `${endpoint}/categoryAttribute/findUnique`, args, options, fetch);
}

export function useSuspenseFindUniquecategoryAttribute<TArgs extends Prisma.categoryAttributeFindUniqueArgs, TQueryFnData = Prisma.categoryAttributeGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.categoryAttributeFindUniqueArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('categoryAttribute', `${endpoint}/categoryAttribute/findUnique`, args, options, fetch);
}

export function useFindFirstcategoryAttribute<TArgs extends Prisma.categoryAttributeFindFirstArgs, TQueryFnData = Prisma.categoryAttributeGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.categoryAttributeFindFirstArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('categoryAttribute', `${endpoint}/categoryAttribute/findFirst`, args, options, fetch);
}

export function useSuspenseFindFirstcategoryAttribute<TArgs extends Prisma.categoryAttributeFindFirstArgs, TQueryFnData = Prisma.categoryAttributeGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.categoryAttributeFindFirstArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('categoryAttribute', `${endpoint}/categoryAttribute/findFirst`, args, options, fetch);
}

export function useUpdatecategoryAttribute(options?: Omit<(UseMutationOptions<(categoryAttribute | undefined), DefaultError, Prisma.categoryAttributeUpdateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.categoryAttributeUpdateArgs, DefaultError, categoryAttribute, true>('categoryAttribute', 'PUT', `${endpoint}/categoryAttribute/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.categoryAttributeUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.categoryAttributeUpdateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, categoryAttribute, Prisma.categoryAttributeGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.categoryAttributeUpdateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, categoryAttribute, Prisma.categoryAttributeGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManycategoryAttribute(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.categoryAttributeUpdateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.categoryAttributeUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('categoryAttribute', 'PUT', `${endpoint}/categoryAttribute/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.categoryAttributeUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.categoryAttributeUpdateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.categoryAttributeUpdateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertcategoryAttribute(options?: Omit<(UseMutationOptions<(categoryAttribute | undefined), DefaultError, Prisma.categoryAttributeUpsertArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.categoryAttributeUpsertArgs, DefaultError, categoryAttribute, true>('categoryAttribute', 'POST', `${endpoint}/categoryAttribute/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.categoryAttributeUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.categoryAttributeUpsertArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, categoryAttribute, Prisma.categoryAttributeGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.categoryAttributeUpsertArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, categoryAttribute, Prisma.categoryAttributeGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeletecategoryAttribute(options?: Omit<(UseMutationOptions<(categoryAttribute | undefined), DefaultError, Prisma.categoryAttributeDeleteArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.categoryAttributeDeleteArgs, DefaultError, categoryAttribute, true>('categoryAttribute', 'DELETE', `${endpoint}/categoryAttribute/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.categoryAttributeDeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.categoryAttributeDeleteArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, categoryAttribute, Prisma.categoryAttributeGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.categoryAttributeDeleteArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, categoryAttribute, Prisma.categoryAttributeGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManycategoryAttribute(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.categoryAttributeDeleteManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.categoryAttributeDeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('categoryAttribute', 'DELETE', `${endpoint}/categoryAttribute/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.categoryAttributeDeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.categoryAttributeDeleteManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.categoryAttributeDeleteManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregateCategoryAttribute<TArgs extends Prisma.CategoryAttributeAggregateArgs, TQueryFnData = Prisma.GetCategoryAttributeAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.CategoryAttributeAggregateArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('CategoryAttribute', `${endpoint}/categoryAttribute/aggregate`, args, options, fetch);
}

export function useSuspenseAggregateCategoryAttribute<TArgs extends Prisma.CategoryAttributeAggregateArgs, TQueryFnData = Prisma.GetCategoryAttributeAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.CategoryAttributeAggregateArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('CategoryAttribute', `${endpoint}/categoryAttribute/aggregate`, args, options, fetch);
}

export function useGroupBycategoryAttribute<TArgs extends Prisma.categoryAttributeGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.categoryAttributeGroupByArgs['orderBy'] } : { orderBy?: Prisma.categoryAttributeGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.CategoryAttributeGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.CategoryAttributeGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.CategoryAttributeGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.CategoryAttributeGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.categoryAttributeGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('categoryAttribute', `${endpoint}/categoryAttribute/groupBy`, args, options, fetch);
}

export function useSuspenseGroupBycategoryAttribute<TArgs extends Prisma.categoryAttributeGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.categoryAttributeGroupByArgs['orderBy'] } : { orderBy?: Prisma.categoryAttributeGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.CategoryAttributeGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.CategoryAttributeGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.CategoryAttributeGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.CategoryAttributeGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.categoryAttributeGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('categoryAttribute', `${endpoint}/categoryAttribute/groupBy`, args, options, fetch);
}

export function useCountcategoryAttribute<TArgs extends Prisma.categoryAttributeCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.CategoryAttributeCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.categoryAttributeCountArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('categoryAttribute', `${endpoint}/categoryAttribute/count`, args, options, fetch);
}

export function useSuspenseCountcategoryAttribute<TArgs extends Prisma.categoryAttributeCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.CategoryAttributeCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.categoryAttributeCountArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('categoryAttribute', `${endpoint}/categoryAttribute/count`, args, options, fetch);
}

export function useCheckcategoryAttribute<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { id?: string; name?: string; categoryId?: string; order?: number }; }, options?: (Omit<UseQueryOptions<boolean, TError, boolean>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('categoryAttribute', `${endpoint}/categoryAttribute/check`, args, options, fetch);
}
