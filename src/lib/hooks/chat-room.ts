/******************************************************************************
* This file was generated by ZenStack CLI 2.9.4.
******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { Prisma, ChatRoom } from "@prisma/client";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/react-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/react';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;
import { useSuspenseModelQuery, useSuspenseInfiniteModelQuery } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { UseSuspenseQueryOptions, UseSuspenseInfiniteQueryOptions } from '@tanstack/react-query';

export function useCreateChatRoom(options?: Omit<(UseMutationOptions<(ChatRoom | undefined), DefaultError, Prisma.ChatRoomCreateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ChatRoomCreateArgs, DefaultError, ChatRoom, true>('ChatRoom', 'POST', `${endpoint}/chatRoom/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ChatRoomCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.ChatRoomCreateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, ChatRoom, Prisma.ChatRoomGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.ChatRoomCreateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, ChatRoom, Prisma.ChatRoomGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManyChatRoom(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.ChatRoomCreateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ChatRoomCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('ChatRoom', 'POST', `${endpoint}/chatRoom/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ChatRoomCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.ChatRoomCreateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.ChatRoomCreateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManyChatRoom<TArgs extends Prisma.ChatRoomFindManyArgs, TQueryFnData = Array<Prisma.ChatRoomGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ChatRoomFindManyArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ChatRoom', `${endpoint}/chatRoom/findMany`, args, options, fetch);
}

export function useInfiniteFindManyChatRoom<TArgs extends Prisma.ChatRoomFindManyArgs, TQueryFnData = Array<Prisma.ChatRoomGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ChatRoomFindManyArgs>, options?: Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('ChatRoom', `${endpoint}/chatRoom/findMany`, args, options, fetch);
}

export function useSuspenseFindManyChatRoom<TArgs extends Prisma.ChatRoomFindManyArgs, TQueryFnData = Array<Prisma.ChatRoomGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ChatRoomFindManyArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ChatRoom', `${endpoint}/chatRoom/findMany`, args, options, fetch);
}

export function useSuspenseInfiniteFindManyChatRoom<TArgs extends Prisma.ChatRoomFindManyArgs, TQueryFnData = Array<Prisma.ChatRoomGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ChatRoomFindManyArgs>, options?: Omit<UseSuspenseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseInfiniteModelQuery<TQueryFnData, TData, TError>('ChatRoom', `${endpoint}/chatRoom/findMany`, args, options, fetch);
}

export function useFindUniqueChatRoom<TArgs extends Prisma.ChatRoomFindUniqueArgs, TQueryFnData = Prisma.ChatRoomGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.ChatRoomFindUniqueArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ChatRoom', `${endpoint}/chatRoom/findUnique`, args, options, fetch);
}

export function useSuspenseFindUniqueChatRoom<TArgs extends Prisma.ChatRoomFindUniqueArgs, TQueryFnData = Prisma.ChatRoomGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.ChatRoomFindUniqueArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ChatRoom', `${endpoint}/chatRoom/findUnique`, args, options, fetch);
}

export function useFindFirstChatRoom<TArgs extends Prisma.ChatRoomFindFirstArgs, TQueryFnData = Prisma.ChatRoomGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ChatRoomFindFirstArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ChatRoom', `${endpoint}/chatRoom/findFirst`, args, options, fetch);
}

export function useSuspenseFindFirstChatRoom<TArgs extends Prisma.ChatRoomFindFirstArgs, TQueryFnData = Prisma.ChatRoomGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ChatRoomFindFirstArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ChatRoom', `${endpoint}/chatRoom/findFirst`, args, options, fetch);
}

export function useUpdateChatRoom(options?: Omit<(UseMutationOptions<(ChatRoom | undefined), DefaultError, Prisma.ChatRoomUpdateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ChatRoomUpdateArgs, DefaultError, ChatRoom, true>('ChatRoom', 'PUT', `${endpoint}/chatRoom/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ChatRoomUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.ChatRoomUpdateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, ChatRoom, Prisma.ChatRoomGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.ChatRoomUpdateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, ChatRoom, Prisma.ChatRoomGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManyChatRoom(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.ChatRoomUpdateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ChatRoomUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('ChatRoom', 'PUT', `${endpoint}/chatRoom/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ChatRoomUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.ChatRoomUpdateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.ChatRoomUpdateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertChatRoom(options?: Omit<(UseMutationOptions<(ChatRoom | undefined), DefaultError, Prisma.ChatRoomUpsertArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ChatRoomUpsertArgs, DefaultError, ChatRoom, true>('ChatRoom', 'POST', `${endpoint}/chatRoom/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ChatRoomUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.ChatRoomUpsertArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, ChatRoom, Prisma.ChatRoomGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.ChatRoomUpsertArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, ChatRoom, Prisma.ChatRoomGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteChatRoom(options?: Omit<(UseMutationOptions<(ChatRoom | undefined), DefaultError, Prisma.ChatRoomDeleteArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ChatRoomDeleteArgs, DefaultError, ChatRoom, true>('ChatRoom', 'DELETE', `${endpoint}/chatRoom/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ChatRoomDeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.ChatRoomDeleteArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, ChatRoom, Prisma.ChatRoomGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.ChatRoomDeleteArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, ChatRoom, Prisma.ChatRoomGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManyChatRoom(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.ChatRoomDeleteManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ChatRoomDeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('ChatRoom', 'DELETE', `${endpoint}/chatRoom/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ChatRoomDeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.ChatRoomDeleteManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.ChatRoomDeleteManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregateChatRoom<TArgs extends Prisma.ChatRoomAggregateArgs, TQueryFnData = Prisma.GetChatRoomAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.ChatRoomAggregateArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ChatRoom', `${endpoint}/chatRoom/aggregate`, args, options, fetch);
}

export function useSuspenseAggregateChatRoom<TArgs extends Prisma.ChatRoomAggregateArgs, TQueryFnData = Prisma.GetChatRoomAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.ChatRoomAggregateArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ChatRoom', `${endpoint}/chatRoom/aggregate`, args, options, fetch);
}

export function useGroupByChatRoom<TArgs extends Prisma.ChatRoomGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.ChatRoomGroupByArgs['orderBy'] } : { orderBy?: Prisma.ChatRoomGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.ChatRoomGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.ChatRoomGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.ChatRoomGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.ChatRoomGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.ChatRoomGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ChatRoom', `${endpoint}/chatRoom/groupBy`, args, options, fetch);
}

export function useSuspenseGroupByChatRoom<TArgs extends Prisma.ChatRoomGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.ChatRoomGroupByArgs['orderBy'] } : { orderBy?: Prisma.ChatRoomGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.ChatRoomGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.ChatRoomGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.ChatRoomGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.ChatRoomGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.ChatRoomGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ChatRoom', `${endpoint}/chatRoom/groupBy`, args, options, fetch);
}

export function useCountChatRoom<TArgs extends Prisma.ChatRoomCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.ChatRoomCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ChatRoomCountArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ChatRoom', `${endpoint}/chatRoom/count`, args, options, fetch);
}

export function useSuspenseCountChatRoom<TArgs extends Prisma.ChatRoomCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.ChatRoomCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ChatRoomCountArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ChatRoom', `${endpoint}/chatRoom/count`, args, options, fetch);
}

export function useCheckChatRoom<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { id?: string; productId?: string; senderId?: string; receiverId?: string; lastMessage?: string; senderUnread?: number; receiverUnread?: number; status?: string }; }, options?: (Omit<UseQueryOptions<boolean, TError, boolean>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('ChatRoom', `${endpoint}/chatRoom/check`, args, options, fetch);
}
